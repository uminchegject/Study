○設計の見直し

○ブロックごとにvector<std::string>を入れてい行く処理を実装
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

using namespace std;


vector<string> json_objects;
size_t pos = 0;
size_t brace_depth = 0;
string current_object;

while (pos < json_str.size()) {
	char c = json_str[pos];
	if (c == '{') 
	{
		if (brace_depth == 0) 
		{
			current_object.clear();
		}
		brace_depth++;
		current_object += c;
	}
	else if (c == '}') {
		brace_depth--;
		current_object += c;

		if (brace_depth == 0) 
		{
			json_objects.push_back(current_object);
			current_object.clear();
		}
	}
	else 
	{
		current_object += c;
	}
	pos++;
}

○構造の構築
・parent_idのインデックスブロックを取得
・ブロックの名前とparent_idを取得
 -nameを構造に加えていく
・parent_idが-1になるまで繰り返す

○vertex_bufferからの取得処理
・node_listのnameを取得しKeyと照らし合わせる
・照合したらid(インデックス)を取得して、インデックスとして使用する
