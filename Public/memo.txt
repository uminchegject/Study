#include <pxr/pxr.h>
#include <pxr/usd/usdGeom/xform.h>
#include <pxr/usd/usdSkel/rig.h>

pxr::GfMatrix4d CalculateInverseMatrix(const pxr::GfMatrix4d& matrix4x3) {
    pxr::GfMatrix4d matrix4x4 = matrix4x3;
    return matrix4x4.GetInverse();
}


#include <pxr/pxr.h>
#include <pxr/usd/gf/rotation.h>
#include <pxr/usd/gf/quat.h>
#include <cmath>
pxr::GfRotation EulerToGfRotation(float pitch, float yaw, float roll) {
    // オイラー角（ピッチ、ヨー、ロール）からクォータニオンへ変換
    float cy = cos(yaw * 0.5);
    float sy = sin(yaw * 0.5);
    float cp = cos(pitch * 0.5);
    float sp = sin(pitch * 0.5);
    float cr = cos(roll * 0.5);
    float sr = sin(roll * 0.5);

    // クォータニオン
    float qw = cr * cp * cy + sr * sp * sy;
    float qx = sr * cp * cy - cr * sp * sy;
    float qy = cr * sp * cy + sr * cp * sy;
    float qz = cr * cp * sy - sr * sp * cy;

    // GfQuatを作成してGfRotationに変換
    pxr::GfQuatf quat(qx, qy, qz, qw);
    return pxr::GfRotation(quat);
}