●CustomStream

class Custom
{

public:

	struct Face
	{
		int vertexCounts;
		std::vector<int> vertexIndices;		
	}
	
	Custom(file_path);
	
	std::vector<Point> const &GetPoints() const
	{
		return points;
	}
	
	std::vector<GfVec2f> const &GetUVs() const
	{
		return uvs;
	}	
	
	GfVec3f const &GetUVs() const
	{
		return aabb;
	}

	std::vector<Face> const &GetFaces() const
	{
		return faces;
	}	
	
	GfVec2f aabb;
	std::vector<GfVec3f> points;
    std::vector<GfVec2f> uvs;
    std::vector<GfVec3f> normals;
    std::string name;
    std::vector<Face> faces;

}

void Custom::Custom(file_path)
{
	
}



●Translator
SdfLayerRefPtr layer = SdfLayer::CreateAnonymous(".usda");

UsdStageRefPtr stage = UsdStage::Open(layer);

UsdGeomMesh mesh = UsdGeomMesh::Define(stage, SdfPath("/" + CustomStream.GetName()));

//UV情報を取得
const std::vector<GfVec2f> &pointsUV = CustomStream.GetUVs();
VtVec2fArray usdUVs;
usdUVs.assign(pointsUV.begin(), pointsUV.end());

//Points情報を設定
const std::vector<UsdCustomStream::Point> &Points = CustomStream.GetPoints();
mesh.GetPointsAttr().Set(usdPoints);

//aabb情報を設定
VtVec3fArray extentArray(2);
GfVec2f aabb = CustomStream.GetAabb();
extentArray[0] = aabb.x;
extentArray[1] = aabb.y;
mesh.GetExtentAttr().Set(extentArray);


//Face情報を設定
VtArray<int> faceVertexCounts, faceVertexIndices;
for (const auto& face : CustomStream.GetFaces()) 
{
	faceVertexCounts.push_back(face.vertexCounts);
	for (const auto& indice : face.vertexIndices) {
		faceVertexIndices.push_back(indice);
	}
}	
mesh.GetFaceVertexCountsAttr().Set(faceVertexCounts);
mesh.GetFaceVertexIndicesAttr().Set(faceVertexIndices);

