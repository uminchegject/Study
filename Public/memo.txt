#include "pxr/pxr.h"
#include "usd/usd/prim.h"
#include "usd/usd/relationship.h"
#include "usd/usd/attribute.h"
#include "usd/usdGeom/pointBased.h"
#include "usd/usdSkel/skeleton.h"
#include "usd/usdSkel/animation.h"
#include "usd/usdSkel/primvar.h"

PXR_NAMESPACE_USING_DIRECTIVE

void AddSkeletonDataToMesh(UsdStageRefPtr stage, const SdfPath& meshPath) {
    // メッシュのプリムを取得
    UsdPrim meshPrim = stage->GetPrimAtPath(meshPath);
    
    // スケルトンのリレーションを追加
    SdfPath skeletonPath("/Model/Skel");
    UsdRelationship skeletonRel = meshPrim.CreateRelationship("skel:skeleton", true);
    skeletonRel.AddTarget(skeletonPath);

    // jointIndices プリムバリアントの作成
    UsdAttribute jointIndicesAttr = meshPrim.CreateAttribute(
        TfToken("primvars:skel:jointIndices"), SdfValueTypeNames->IntArray);
    jointIndicesAttr.Set<std::vector<int>>({
        2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1
    });
    jointIndicesAttr.SetMetadata("interpolation", VtValue("vertex"));
    jointIndicesAttr.SetMetadata("elementSize", VtValue(1));

    // jointWeights プリムバリアントの作成
    UsdAttribute jointWeightsAttr = meshPrim.CreateAttribute(
        TfToken("primvars:skel:jointWeights"), SdfValueTypeNames->FloatArray);
    jointWeightsAttr.Set<std::vector<float>>({
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    });
    jointWeightsAttr.SetMetadata("interpolation", VtValue("vertex"));
    jointWeightsAttr.SetMetadata("elementSize", VtValue(1));

    // geomBindTransform (変換行列)の作成
    UsdAttribute geomBindTransformAttr = meshPrim.CreateAttribute(
        TfToken("primvars:skel:geomBindTransform"), SdfValueTypeNames->Matrix4d);
    geomBindTransformAttr.Set(GfMatrix4d(1.0)); // 単位行列を設定
}

