■UsdAbc_AlembicDataWriter
・Alembic形式へ書き込むためのクラスです。
・SdfAbstructDataが所有し、SdfAbstractDataからUSDの情報を本クラスに渡してAlembicデータに変換します

・基本的な処理は_WriterContextクラスで行うため、UsdAbc_AlembicDataWriterで_WriterContextを継承したUsdAbc_AlembicDataWriterImplクラスを所有しています。
class UsdAbc_AlembicDataWriterImpl : public _WriterContext { };

UsdAbc_AlembicDataWriter::UsdAbc_AlembicDataWriter() :
    _impl(new UsdAbc_AlembicDataWriterImpl)
{
    // Do nothing
}

・書き込みに関しては主にOpenとWrite処理を呼び出しています。
bool
UsdAbc_AlembicDataWriter::Open(
    const std::string& filePath,
    const std::string& comment)
{
    TRACE_FUNCTION();

    _errorLog.clear();

    const std::string dir = TfGetPathName(filePath);
    if (!dir.empty() && !TfIsDir(dir) && !TfMakeDirs(dir)) {
        TF_RUNTIME_ERROR("Could not create directory '%s'", dir.c_str());
        return false;
    }

    try {
	
		//Alembicのデータ管理を行うArchiveクラスを生成し、_implに設定する
        _impl->SetArchive(
            CreateArchiveWithInfo(Alembic::AbcCoreOgawa::WriteArchive(),
                                  filePath, writerName, comment));
        return true;
    }
    catch (std::exception& e) {
        _errorLog.append(e.what());
        _errorLog.append("\n");
        return false;
    }
}

bool
UsdAbc_AlembicDataWriter::Write(const SdfAbstractDataConstPtr& data)
{
    TRACE_FUNCTION();

    try {
        if (_impl->GetArchive().valid() && data) {
			//各スキーマに対して呼び出すべき処理を_WriteSchemaに設定しておく
            const _WriterSchema& schema = _GetSchema();
            _impl->SetSchema(&schema);
			//SdfAbstractDataを_WriteContextに設定
            _impl->SetData(data);
			//書き込み作業
            _WritePrim(*_impl, _Parent(), SdfPath::AbsoluteRootPath());
        }
        return true;
    }
    catch (std::exception& e) {
        _errorLog.append(e.what());
        _errorLog.append("\n");
        return false;
    }
}


・各スキーマに対して呼び出すべき処理を_WriteSchemaに設定しておく
static
const _WriterSchema&
_GetSchema()
{
    static _WriterSchemaBuilder builder;
    return builder.schema;
}

struct _WriterSchemaBuilder {
    _WriterSchema schema;

    _WriterSchemaBuilder();
};

_WriterSchemaBuilder::_WriterSchemaBuilder()
{
    schema.AddType(UsdAbcPrimTypeNames->Scope)
        .AppendWriter(_WriteUnknown)
        .AppendWriter(_WriteImageable)
        .AppendWriter(_WriteArbGeomParams)
        .AppendWriter(_WriteUserProperties)
        .AppendWriter(_WriteOther)
        ;
    schema.AddType(UsdAbcPrimTypeNames->Xform)
        .AppendWriter(_WriteXform)
        .AppendWriter(_WriteImageable)
        .AppendWriter(_WriteArbGeomParams)
        .AppendWriter(_WriteUserProperties)
        .AppendWriter(_WriteOther)
        ;
    schema.AddType(UsdAbcPrimTypeNames->Mesh)
        .AppendWriter(_WriteXformParent)
        .AppendWriter(_WriteSubD)
        .AppendWriter(_WriteMayaColor)
        .AppendWriter(_WriteGprim)
        .AppendWriter(_WriteImageable)
        .AppendWriter(_WriteArbGeomParams)
        .AppendWriter(_WriteUserProperties)
        .AppendWriter(_WriteOther)
        ;
    schema.AddType(UsdAbcPrimTypeNames->PolyMesh)
        .AppendWriter(_WriteXformParent)
        .AppendWriter(_WritePolyMesh)
        .AppendWriter(_WriteMayaColor)
        .AppendWriter(_WriteGprim)
        .AppendWriter(_WriteImageable)
        .AppendWriter(_WriteArbGeomParams)
        .AppendWriter(_WriteUserProperties)
        .AppendWriter(_WriteOther)
        ;
    schema.AddType(UsdAbcPrimTypeNames->NurbsCurves)
        .AppendWriter(_WriteXformParent)
        .AppendWriter(_WriteNurbsCurves)
        .AppendWriter(_WriteMayaColor)
        .AppendWriter(_WriteGprim)
        .AppendWriter(_WriteImageable)
        .AppendWriter(_WriteArbGeomParams)
        .AppendWriter(_WriteUserProperties)
        .AppendWriter(_WriteOther)
        ;
    schema.AddType(UsdAbcPrimTypeNames->BasisCurves)
        .AppendWriter(_WriteXformParent)
        .AppendWriter(_WriteBasisCurves)
        .AppendWriter(_WriteMayaColor)
        .AppendWriter(_WriteGprim)
        .AppendWriter(_WriteImageable)
        .AppendWriter(_WriteArbGeomParams)
        .AppendWriter(_WriteUserProperties)
        .AppendWriter(_WriteOther)
        ;
    schema.AddType(UsdAbcPrimTypeNames->HermiteCurves)
        .AppendWriter(_WriteXformParent)
        .AppendWriter(_WriteHermiteCurves)
        .AppendWriter(_WriteMayaColor)
        .AppendWriter(_WriteGprim)
        .AppendWriter(_WriteImageable)
        .AppendWriter(_WriteArbGeomParams)
        .AppendWriter(_WriteUserProperties)
        .AppendWriter(_WriteOther)
        ;
    schema.AddType(UsdAbcPrimTypeNames->Points)
        .AppendWriter(_WriteXformParent)
        .AppendWriter(_WritePoints)
        .AppendWriter(_WriteMayaColor)
        .AppendWriter(_WriteGprim)
        .AppendWriter(_WriteImageable)
        .AppendWriter(_WriteArbGeomParams)
        .AppendWriter(_WriteUserProperties)
        .AppendWriter(_WriteOther)
        ;
    schema.AddType(UsdAbcPrimTypeNames->Camera)
        .AppendWriter(_WriteXformParent)
        .AppendWriter(_WriteCameraParameters)
        .AppendWriter(_WriteArbGeomParams)
        .AppendWriter(_WriteUserProperties)
        .AppendWriter(_WriteOther)
        ;
    schema.AddType(UsdAbcPrimTypeNames->GeomSubset)
        .AppendWriter(_WriteFaceSet)
        ;

    // This handles the root.
    schema.AddType(UsdAbcPrimTypeNames->PseudoRoot)
        .AppendWriter(_WriteRoot)
        ;

    // This handles overs with no type and any unknown prim type.
    schema.AddFallbackType()
        .AppendWriter(_WriteUnknown)
        .AppendWriter(_WriteUnknownMayaColor)
        .AppendWriter(_WriteGprim)
        .AppendWriter(_WriteImageable)
        .AppendWriter(_WriteArbGeomParams)
        .AppendWriter(_WriteUserProperties)
        .AppendWriter(_WriteOther)
        ;
}

・
static　void　_WritePrim(
    _WriterContext& context,
    const _Parent& parent,
    const SdfPath& path)
{
    _Parent prim;
    {
	
		//書き込み処理
        const TfToken typeName = _ComputeTypeName(context, path);
        _PrimWriterContext primContext(context, parent, path);
        //_WriterSchemaBuilderで設定した各Schemaで呼び出すべき処理をここで取得し呼び出す
		for (const auto& writer : context.GetSchema().GetPrimWriters(typeName)) 
		{
            TRACE_SCOPE("UsdAbc_AlembicDataWriter:_WritePrim");
            writer(&primContext);
        }
        prim = primContext.GetParent();
    }

	// 子Primも同等に書き込みを行っていく
    const VtValue childrenNames =
        context.GetData().Get(path, SdfChildrenKeys->PrimChildren);
    if (childrenNames.IsHolding<TfTokenVector>()) {
        for (const auto& childName :
                 childrenNames.UncheckedGet<TfTokenVector>()) {
            _WritePrim(context, prim, path.AppendChild(childName));
        }
    }
}


static void _WriteXform(_PrimWriterContext* context)
{
    // Collect the properties we need.  We'll need these to compute the
    // metadata.
    context->SetSampleTimesUnion(UsdAbc_TimeSamples());

    UsdSamples xformOpOrder = context->ExtractSamples(
        UsdGeomTokens->xformOpOrder, SdfValueTypeNames->TokenArray);

    bool hasXformOpOrder = (context->GetSampleTimesUnion().size()>0);

    // Clear samples from xformOpOrder.
    context->SetSampleTimesUnion(UsdAbc_TimeSamples());

    // XXX: NOTE
    // We can't use the GetLocalTranformation API available in UsdGeomXformable
    // here, as there is no UsdPrim (or UsdStage) from which we can construct a 
    // UsdGeomXformable schema object. Hence, for now, if xformOpOrder has a 
    // value, then assuming that the custom "xformOp:transform" attribute will 
    // have the composed local transformation in it.
    // 
    // If xformOpOrder has no authored value, then fallback to reading the
    // old-style transform attribute.
    // 
    const TfToken &transformAttrName = hasXformOpOrder ? 
        _tokens->xformOpTransform : _tokens->transform;
    const SdfValueTypeName &transformValueType = hasXformOpOrder ? 
        SdfValueTypeNames->Matrix4d : SdfValueTypeNames->Matrix4d;

    if (hasXformOpOrder) {
        // Extract and clear samples from the old-style transform attribute, if 
        // it exists, so it doesn't get written out as blind data.
        context->ExtractSamples(_tokens->transform, 
                                SdfValueTypeNames->Matrix4d);                                                   
        context->SetSampleTimesUnion(UsdAbc_TimeSamples());
    }

    UsdSamples transform = context->ExtractSamples(transformAttrName, 
                                                   transformValueType);

    // At this point, all transform related attributes (including all xformOps)
    // should have been extracted. Validate here to make sure there aren't 
    // any unextracted xformOp attributes. 
    for (const auto& name : context->GetUnextractedNames()) {
        if (UsdGeomXformOp::IsXformOp(name)) {
            TF_RUNTIME_ERROR("Found unextracted property '%s' in xformOp "
                "namespace.", name.GetText());
        }
    }

    // Collect the metadata.  Here we have to combine metadata from the
    // prim and from the transform attribute since Alembic will not give
    // us a chance to set metadata on the Alembic properties.
    MetaData metadata = _GetPrimMetadata(*context);
    {
        // Get the transform property metadata.
        MetaData transformMetadata =
            _GetPropertyMetadata(*context, transformAttrName, transform);

        // Merge the property metadata into the prim metadata in a way we
        // can extract later for round-tripping.
        for (MetaData::const_iterator i  = transformMetadata.begin();
                                      i != transformMetadata.end(); ++i) {
            if (! i->second.empty()) {
                metadata.set("Usd.transform:" + i->first, i->second);
            }
        }
    }

    // Create the object and make it the parent.
    OXformPtr object(new OXform(context->GetParent(),
                                context->GetAlembicPrimName(),
                                metadata));
    context->SetParent(object);

    // Copy all the samples.
    typedef XformSample SampleT;
    SampleT sample;
    for (double time : context->GetSampleTimesUnion()) {
        // Build the sample.
        sample.reset();
        _CopyXform(time, transform, &sample);
        sample.setInheritsXforms(true);

        // Write it.
        object->getSchema().set(sample);
    }

    // Set the time sampling.
    object->getSchema().setTimeSampling(
        context->AddTimeSampling(context->GetSampleTimesUnion()));
}