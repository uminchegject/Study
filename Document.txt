■概要
処理の流れとしては
・alembicFileFormat→alembicData→alembicReader,Writerの流れで実装されています。


■SdfFileFormatについて
特定のファイルフォーマットからUSDへの読み込み、書き込み機能を実装するための基底クラスです。
基本的にはRoad,Write関数をOverRideしてファイルフォーマットの読み込み、書き込み処理を実装します。
SdfFileFormatを用いたファイルフォーマットプラグイン実装だけで考えたら、既存TutorialのusdObjが下記のSdfAbstractDataを用いない最低限の実装がされているので参考になると思います。


●クラス内の主要関数
・fileFormatPluginに対応した形式かを確認する関数
・usdAbcではTfGetExtension関数を用いてフォーマットを取得し、PluginのFormatIdと照らし合わせる処理が実装されている
UsdAbcAlembicFileFormat::CanRead(const string& filePath) const
{
    // TfGetExtension関数を用いてfilePathの形式を取得
    auto extension = TfGetExtension(filePath);
    if (extension.empty()) {
        return false;
    }
	//取得した形式がjsonで定義しているformatIdと同じか確認し返す
    return extension == this->GetFormatId();
}


・Fileを呼び込みLayerに設定する処理を行う関数
・「ReadFromString」という関数もあるがusdAbcでは未実装(実装はされているが基底クラスの処理を読んでいるだけ)
・usdAbcではSdfAbstractDataを継承したUsdAbc_AlembicDataクラスでAbcファイルを呼び込むため、UsdAbc_AlembicDataを定義しクラス内で呼み込むように実装している
bool UsdAbcAlembicFileFormat::Read(
    SdfLayer* layer,
    const string& resolvedPath,
    bool metadataOnly) const
{

    TRACE_FUNCTION();

    SdfAbstractDataRefPtr data = InitData(layer->GetFileFormatArguments());
    UsdAbc_AlembicDataRefPtr abcData = TfStatic_cast<UsdAbc_AlembicDataRefPtr>(data);
	
	//UsdAbc_AlembicDataクラスでabcフォーマットを開く
    if (!abcData->Open(resolvedPath)) {
        return false;
    }

	//UsdAbc_AlembicDataクラスでabcフォーマットを開く処理がうまくいった際は、Layerにを設定する。
    _SetLayerData(layer, data);
    return true;
}


・usdのLayerからAbcファイルに書き込む処理を行う関数
・「WriteToString」「WriteToStream」という関数もあるがusdAbcでは未実装(実装はされているが基底クラスの処理を読んでいるだけ)
・usdAbcではSdfAbstractDataを継承したUsdAbc_AlembicDataクラスで書き込み処理を行うため、UsdAbc_AlembicDataのWrite処理を呼ぶように実装している
bool
UsdAbcAlembicFileFormat::WriteToFile(
    const SdfLayer& layer,
    const std::string& filePath,
    const std::string& comment,
    const FileFormatArguments& args) const
{
    // レイヤーからSdfAbstractDataを取得
    SdfAbstractDataConstPtr data = _GetLayerData(layer);
	// レイヤーのSdfAbstractDataを引数にUsdAbc_AlembicDataクラスでAbcに書き込む処理を呼び出す
    return TF_VERIFY(data) && UsdAbc_AlembicData::Write(data, filePath, comment);
}



■alembicFileFormatについて
SceneDescriptionDataを格納するためのコンテナです
任意のSdfPathに対して、１つ以上のキー(filed)と値のペアを保持でき、その値にアクセスしたり変更したりできます。
また、TimeLineAPIを用いることで、Timeに対しての値を取得するような実装ができ、usdAbcのアニメーション周りの情報をTimeLineAPIを用いて実装しています。
alembicのような動的な情報を管理する際にSdfAbstractDataが用いられています。
既存TutorialのDancingTutorialも動的なusdデータの管理方法の一例としてSdfAbstractDataを用いた実装がされているので参考になると思います。
AlembicAbstractDataでの処理の大半が「alembicReader」「alembicWriter」で行われているため、現在こちらを調査しています。


●Time-sample API
    virtual std::set<double> ListAllTimeSamples() const;
    virtual std::set<double> ListTimeSamplesForPath(const SdfPath&) const;
    virtual bool GetBracketingTimeSamples(double time, double* tLower, double* tUpper) const;
    virtual size_t GetNumTimeSamplesForPath(const SdfPath& path) const;
    virtual bool GetBracketingTimeSamplesForPath(const SdfPath&,
                                    double time,
                                    double* tLower, double* tUpper) const;
    virtual bool QueryTimeSample(const SdfPath&, double time,
                    SdfAbstractDataValue* value) const;
    virtual bool QueryTimeSample(const SdfPath&, double time,
                    VtValue* value) const;
    virtual void SetTimeSample(const SdfPath&, double, const VtValue&);
    virtual void EraseTimeSample(const SdfPath&, double);